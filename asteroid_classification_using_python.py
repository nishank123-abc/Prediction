# -*- coding: utf-8 -*-
"""Asteroid_Classification_using_python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/nishank123-abc/Nishank-Bhade/blob/Python%2CMachine-learning/Asteroid_Classification_using_python.ipynb

Import Statements
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('dark_background')
import seaborn as sns

"""Reading CSV Data"""

df = pd.read_csv('/content/drive/MyDrive/Minor project/nasa.csv')
df.head()

df.shape

df.info()

"""Dropping the columns which are not useful in classification"""

df = df.drop(['Neo Reference ID', 'Name', 'Orbit ID', 'Close Approach Date',
                        'Epoch Date Close Approach', 'Orbit Determination Date'] , axis = 1)
df.head()

"""One Hot Encoding of Hazardous Column"""

hazardous_labels = pd.get_dummies(df['Hazardous'])
hazardous_labels

df = pd.concat([df, hazardous_labels], axis = 1)
df.head()

df = df.drop(['Hazardous'], axis = 1)
df.head()

df.info()

"""Observing Unique Values in Orbiting Body and Equinox"""

df['Orbiting Body'].value_counts()

df['Equinox'].value_counts()

"""Only single unique value, so both can be dropped"""

df = df.drop(['Orbiting Body', 'Equinox'], axis = 1)

"""Heatmap of Correlation"""

plt.figure(figsize = (20,20))
sns.heatmap(df.corr(),annot = True)

"""Many Columns are there which are having correlation 1 because they are identical columns with a different unit. So, can be dropped."""

df = df.drop(['Est Dia in KM(max)', 'Est Dia in M(min)', 'Est Dia in M(max)', 'Est Dia in Miles(min)'
             ,'Est Dia in Miles(max)', 'Est Dia in Feet(min)', 'Est Dia in Feet(max)',
             'Relative Velocity km per hr', 'Miles per hour', 'Miss Dist.(lunar)',
             'Miss Dist.(kilometers)', 'Miss Dist.(miles)'], axis = 1)
df.head()

"""Final Heatmap"""

plt.figure(figsize = (20,20))
sns.heatmap(df.corr(),annot = True)

"""Drop the False Column, True is enough for classification"""

df.drop([False], axis = 1, inplace = True)
df.head()

df.describe()

"""Model Building"""

x = df.drop([True], axis = 1)
y = df[True].astype(int)
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, random_state = 0 , test_size = 0.3)

"""XGBoost Classifier
XGBoost is a decision-tree-based ensemble Machine Learning algorithm that uses a gradient boosting framework. In prediction problems involving unstructured data (images, text, etc.) ... A wide range of applications: Can be used to solve regression, classification, ranking, and user-defined prediction problems.
The XGBoost library provides a built-in function to plot features ordered by their importance.
"""

from xgboost import XGBClassifier
from matplotlib import pyplot
from xgboost import plot_importance

xbg_model = XGBClassifier()
xbg_model.fit(x_train, y_train)
plot_importance(xbg_model)
pyplot.show()

"""Final Accuracy Score"""

from sklearn.metrics import accuracy_score

predictions = xbg_model.predict(x_test)
acc = accuracy_score(y_test, predictions)
print(str(np.round(acc*100, 2))+'%')